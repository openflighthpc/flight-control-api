#!/usr/bin/env bash
set -e

# Get cost of instance(s) between two dates, as a float
#
# Vars:
# START_TIME: Unix timestamp
# END_TIME: Unix timestamp
# INSTANCE_IDs: IDs to get cost for, comma separated list
# PROJECT_NAME: provided credential

# Calculate date range
TIME_DIFF=$(echo "$END_TIME-$START_TIME" | "$RUN_ENV/bin/bc-1.07.1/bc/bc")
DIFF_IN_HOURS=$(echo "$TIME_DIFF/60/60" | "$RUN_ENV/bin/bc-1.07.1/bc/bc" -l)
UPTIME=$(echo "$DIFF_IN_HOURS * 0.6" | "$RUN_ENV/bin/bc-1.07.1/bc/bc" -l) # Assume an average uptime of 60%

IFS=',' read -ra ids_array <<< "$INSTANCE_IDS"

# Initialise final output variable as empty YAML object
export OUT="---"

# Very convoluted method of injecting yq merge into ids_array
for instance in "${ids_array[@]}"
do
  export INSTANCE_ID=$("$RUN_ENV/bin/yq_linux_amd64" -n "with(.; .instance_id = \"$instance\")")

  # Fetch instance type
  TYPE=$("$RUN_ENV/bin/yq_linux_amd64" '.model' "$RUN_ENV/projects/$PROJECT_NAME/nodes/$instance.yaml")

  CURRENCY=$("$RUN_ENV/bin/yq_linux_amd64" '.financial_data.currency' "$RUN_ENV/instance_models/$TYPE.yaml")

  # Fetch hourly price of instance type
  HOURLY_COST=$("$RUN_ENV/bin/yq_linux_amd64" '.financial_data.price_per_hour' "$RUN_ENV/instance_models/$TYPE.yaml")
  INSTANCE_COST=$(printf "%.15f" "$(echo "$UPTIME * $HOURLY_COST" | "$RUN_ENV/bin/bc-1.07.1/bc/bc" -l)")

  export FINANCIAL_DATA=$("$RUN_ENV/bin/yq_linux_amd64" -n "with(.financial_data; .currency = \"$CURRENCY\" | .price = $INSTANCE_COST)")

  ECO_PERSPECTIVE=$("$RUN_ENV/bin/yq_linux_amd64" '.eco_data.perspective' "$RUN_ENV/instance_models/$TYPE.yaml")

  ECO_UNIT=$("$RUN_ENV/bin/yq_linux_amd64" '.eco_data.unit' "$RUN_ENV/instance_models/$TYPE.yaml")

  # Fetch eco amount of instance type
  ECO_HOURLY_AMOUNT=$("$RUN_ENV/bin/yq_linux_amd64" '.eco_data.max_amount_per_hour' "$RUN_ENV/instance_models/$TYPE.yaml")

  # Total cost for instance
  ECO_TOTAL_AMOUNT=$(printf "%.15f" "$(echo "$UPTIME * $ECO_HOURLY_AMOUNT" | "$RUN_ENV/bin/bc-1.07.1/bc/bc" -l)")

  export ECO_DATA=$("$RUN_ENV/bin/yq_linux_amd64" -n "with(.eco_data; .perspective = \"$ECO_PERSPECTIVE\" | .unit = \"$ECO_UNIT\" | .amount = $ECO_TOTAL_AMOUNT)")

  # Merge out-string and new instance string
  OUT=$("$RUN_ENV/bin/yq_linux_amd64" -n 'env(OUT) + [env(INSTANCE_ID) + env(FINANCIAL_DATA) + env(ECO_DATA)]')
done

"$RUN_ENV/bin/yq_linux_amd64" -n 'env(OUT)' -o=json
