#!/usr/bin/env bash
set -e

# Get cost of instance(s) between two dates, as a float
#
# Vars:
# START_DATE: Unix timestamp
# END_DATE: Unix timestamp
# INSTANCE_ID: ID to get cost for
# PROJECT_NAME: provided credential

# Calculate date range
TIME_DIFF=$(echo "$END_DATE-$START_DATE" | bc)
DIFF_IN_HOURS=$(echo "$TIME_DIFF/60/60" | bc -l)
UPTIME=$(echo "$DIFF_IN_HOURS * 0.6" | bc -l) # Assume an average uptime of 60%

IFS=',' read -ra ids_array <<< "$INSTANCE_IDS"

# Initialise final output variable as empty YAML object
export out="---"

# Very convoluted method of injecting yq merge into ids_array
for instance in "${ids_array[@]}"
do
  # Fetch instance type
  TYPE=$("$RUN_ENV/bin/yq_linux_amd64" '.model' "$RUN_ENV/projects/$PROJECT_NAME/nodes/$instance.yaml")

  # Fetch hourly price of instance type
  HOURLY_COST=$("$RUN_ENV/bin/yq_linux_amd64" '.price_per_hour' "$RUN_ENV/instance_models/$TYPE.yaml")

  # Fetch kWh usage of instance type
  KWH_USAGE=$("$RUN_ENV/bin/yq_linux_amd64" '.kilowatts_per_hour' "$RUN_ENV/instance_models/$TYPE.yaml")

  # Total cost for instance
  INSTANCE_COST_PER_HOUR=$(echo "$UPTIME * $HOURLY_COST" | bc -l)
  TOTAL_KWH=$(echo "$UPTIME & $KWH_USAGE" | bc -l)

  # Construct variable to store YAML for newly processed instance
  # Has to be exported so that yq can access it
  export new=$("$RUN_ENV/bin/yq_linux_amd64" -n "with(.$instance; .price = \"$INSTANCE_COST_PER_HOUR\" | .kwh= \"$TOTAL_KWH\")")

  # Merge out-string and new instance string
  out=$("$RUN_ENV/bin/yq_linux_amd64" -n 'env(out) + env(new)' -o=json)
done

echo "$out"
